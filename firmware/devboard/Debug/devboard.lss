
devboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00803800  00803800  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002845  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cf0  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000406  00000000  00000000  000047e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00004bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001163  00000000  00000000  00004c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  00005ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_4>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  9c:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <_Z8TCA_initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	83 81       	ldd	r24, Z+3	; 0x03
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	83 83       	std	Z+3, r24	; 0x03
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 a3       	std	Z+39, r24	; 0x27
  b2:	86 a3       	std	Z+38, r24	; 0x26
  b4:	80 81       	ld	r24, Z
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
  c0:	81 81       	ldd	r24, Z+1	; 0x01
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	81 83       	std	Z+1, r24	; 0x01
  c6:	89 e1       	ldi	r24, 0x19	; 25
  c8:	80 a7       	std	Z+40, r24	; 0x28
  ca:	08 95       	ret

000000cc <main>:
int main(void)
{

	// Pin configuration
	//	  Built-in LED	
	PORTA.DIRSET = LED1;
  cc:	e0 e0       	ldi	r30, 0x00	; 0
  ce:	f4 e0       	ldi	r31, 0x04	; 4
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = LED1;
  d4:	85 83       	std	Z+5, r24	; 0x05

	// PWM output pins
	PORTB.DIRSET = 1 << 0;
  d6:	e0 e2       	ldi	r30, 0x20	; 32
  d8:	f4 e0       	ldi	r31, 0x04	; 4
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	81 83       	std	Z+1, r24	; 0x01
	
	//	 Rotary encoder
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
  de:	82 89       	ldd	r24, Z+18	; 0x12
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN2CTRL |= PORT_ISC_FALLING_gc;
  e4:	82 89       	ldd	r24, Z+18	; 0x12
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTC.PIN3CTRL |= PORT_PULLUPEN_bm;
  ea:	e0 e4       	ldi	r30, 0x40	; 64
  ec:	f4 e0       	ldi	r31, 0x04	; 4
  ee:	83 89       	ldd	r24, Z+19	; 0x13
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	83 8b       	std	Z+19, r24	; 0x13
	//PORTC.PIN3CTRL |= PORT_ISC_FALLING_gc;
	
	//TCB_init();
	TCA_init();
  f4:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z8TCA_initv>

	 count = 100;
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	
	sei(); // Enable interrupts
  fe:	78 94       	sei
 100:	ff cf       	rjmp	.-2      	; 0x100 <__EEPROM_REGION_LENGTH__>

00000102 <__vector_4>:
    {
	}
}

ISR(PORTB_PORT_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	81 e7       	ldi	r24, 0x71	; 113
 112:	96 e0       	ldi	r25, 0x06	; 6
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <__vector_4+0x12>
 118:	00 c0       	rjmp	.+0      	; 0x11a <__vector_4+0x18>
 11a:	00 00       	nop
	_delay_ms(2);
	if (PORTC.IN & ENCODER_B_bm)
 11c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__RODATA_PM_OFFSET__+0x7f8448>
 120:	83 ff       	sbrs	r24, 3
 122:	13 c0       	rjmp	.+38     	; 0x14a <__vector_4+0x48>
	{
		if (count <= 245)
 124:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 128:	86 3f       	cpi	r24, 0xF6	; 246
 12a:	08 f5       	brcc	.+66     	; 0x16e <__vector_4+0x6c>
		{
			count += 10;
 12c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 130:	86 5f       	subi	r24, 0xF6	; 246
 132:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
			TCA0.SPLIT.LCMP0 = count*count >> 8;
 136:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 13a:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 13e:	89 9f       	mul	r24, r25
 140:	c0 01       	movw	r24, r0
 142:	11 24       	eor	r1, r1
 144:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
 148:	12 c0       	rjmp	.+36     	; 0x16e <__vector_4+0x6c>
		}
	} 
	else if (count >= 10)
 14a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 14e:	8a 30       	cpi	r24, 0x0A	; 10
 150:	70 f0       	brcs	.+28     	; 0x16e <__vector_4+0x6c>
	{
		count -= 5;
 152:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 156:	85 50       	subi	r24, 0x05	; 5
 158:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
		TCA0.SPLIT.LCMP0 = count*count >> 8;
 15c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 160:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 164:	89 9f       	mul	r24, r25
 166:	c0 01       	movw	r24, r0
 168:	11 24       	eor	r1, r1
 16a:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
	}

	PORTB.INTFLAGS = 0xFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__RODATA_PM_OFFSET__+0x7f8429>
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
